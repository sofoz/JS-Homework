1. Приведите примеры GET-вызовов с параметрами (2-3 возможных адреса URL, можно реальных, можно из головы)?

Ищет запрос async await js
https://www.youtube.com/results?search_query=async+await+js

Находит в каталоге джинсы с соответствущим размером 
www.zara.com/catalog?category=jeans&size=s
    
2. Расскажите своими словами, чем отличаются GET и POST-запросы?
Основное отличие в  способе передачи данных. GET не шифрует их, поэтому они видны, могут быть кешированы, оставаться в истории браузера. POST - скрывает данные, поэтому не может быть кеширован или остаться в истории браузера. 

3. Какой вид запроса лучше использовать для получения отфильтрованного списка товаров? 
GET 

4. А какой - для формы регистрации? 
POST

5. Посмотрите на запрос и разберитесь, что он делает и что означают и на что влияют параметры api_key, q, limit, lang? Как сделать так, чтобы запрос возвращал не 25, а 5 картинок? 
api_key - ключ шифрования для аутентификации пользователя в системе, генерируется при регистрации на сайте
q - текст поиска
limit - количество картинок. Нужно установить 5, чтобы запрос возвращал 5 картинок
lang - язык
    
6. Как посмотреть заголовки запроса к странице или API?
Chrome F12 Dev Tools, вкладка Network

7. Самостоятельно разберитесь, что такое CORS. Приведите пример их включения в запросе `fetch`.
«CORS»: Cross-Origin Resource Sharing («совместное использование ресурсов между разными источниками»).
Ключевым понятием здесь является источник (origin) – комбинация домен/порт/протокол.
Запросы на другой источник – отправленные на другой домен (или даже поддомен), или протокол, или порт – требуют специальных заголовков от удалённой стороны.
CORS регулирует общение браузера с API

8. Что можно писать в параметре заголовков `Content-Type` ?
Заголовок Content-Type сообщает клиенту, какой будет тип передаваемого контента. На основе этой информации браузер определяет как интерпретировать содержимое.
Заголовок также может содержать больше информации, такой как charset.
Content-Type: text/html; charset=UTF-8
"text" - это тип, а "html" - подтип документа.

application/x-www-form-urlencoded
multipart/form-data
text/plain

9. Давайте отправим информацию о собачке в API по адресу `localhost/pets/add`. Как будет выглядеть `fetch` в таком случае?
https://localhost/pets/add?breed=Beagle&size=large&color=orange&age=6

10. Изучите статью [https://learn.javascript.ru/promise-basics](https://learn.javascript.ru/promise-basics) и самостоятельно разберитесь, что такое промисы. Напишите в 1-2 предложения, что это такое и приведите пример, где вы уже сталкивались с промисами? Сталкивались при получении API
Промисы - это обёртки для функций обратного вызова (callback). Их можно использовать для упорядочивания синхронных и асинхронных действий.

Синтаксис создания Promise:
let promise = new Promise(function(resolve, reject) {
  // функция-исполнитель (executor)
  // "певец"
});

Промис устроен таким образом, что рычаги управления его состоянием остаются у асинхронной функции. После создания, промис находится в состоянии ожидания pending. Когда асинхронная операция завершается, функция переводит промис в состояние успеха fulfilled или ошибки rejected.
Поменять можно состояние только один раз: перейти из pending либо в fulfilled, либо в rejected.

С помощью методов then, catch и finally мы можем реагировать на изменение состояния промиса и выполнять код.