1. 
варианты объявления массива:
let arr = new Array(item1, item2...);
let arr = [item1, item2...]; 
new Array(number) - создаёт массив с заданной длиной, но без элементов.

2. 
Массивом может быть:
Стек технологий для разработки проекта
Список книг на лето 
Набор приложений на рабочем столе

3. 
Для удаления элементов из массива можно воспользоваться методом splice.
splice(pos, deleteCount, ...items) – начиная с индекса pos, удаляет deleteCount элементов и вставляет items

let arrow = ["apple", "grape", "peach"];
arrow.splice(1, 1); // начиная с позиции 1, удалить 1 элемент
alert(arrow); // осталось ["apple", "peach"]

4. 
Любая часть for может быть пропущена.
Например, можно объявить переменную вне цикла, но использовать ее в нем:
let i = 0;
for (; i < 3; i++) {
  alert( i ); // 0, 1, 2
}

Если убрать шаг, цикл превратился в аналог while (i<3)
let i = 0;
for (; i < 3;) {
  alert( i );
}

Если убрать все, получим бесконечный цикл (но его можно прервать директивой break). При этом сами точки с запятой ; обязательно должны присутствовать, иначе будет ошибка синтаксиса.
for (;;) {
}

5. Самостоятельно разберитесь, как работает цикл while и приведите два примера кода с его использованием.
Цикл while имеет следующий синтаксис:
while (condition) {
  // код
  // также называемый "телом цикла"
}
- код из тела цикла выполняется, пока условие condition истинно
- чаще используется, когда количество итераций заранее неизвестно
- любое выражение или переменная может быть условием цикла, а не только сравнение: условие while вычисляется и преобразуется в логическое значение

Примеры:
// вывод с 1 до 5
let k = 0;
    while (k < 5) {
       k++ 
         console.log();
        }

//вывод с 0 до 4
let k = 0;
    while (k < 5) {
        console.log();
            k++;   
        }


6.
Если создать массив `new Array(5)`, получится массив с пятью элементами равными undefined

7. Вывести чётные числа от 2 до 10 при помощи цикла for:

for (i = 1; i <= 10; i++) {
            if (i % 2 == 1)
                continue;
            console.log(i);
        }

8. 
Каков будет результат выполнения этого кода? Почему?
    let arr = ["a", "b"];
    arr.push(function() {
      alert( this );
    })
    arr[2](); // ?

Получится:
a, b, (function() {
  alert( this );
}
push - добавление элемента в конец массива. Тут получается добавление элемента с записью функции. 

9. 
Три основных способа перебора элементов массива:
1) for
- по цифровым индексам

for (начало; условие; шаг) {
  // ... тело цикла - действия ...
}

2) for..of
- не предоставляет доступа к номеру текущего элемента, только к его значению (часто это короче)

for (let fruit of fruits) {
  alert( fruit );
}

3) forEach
- позволяет запускать функцию для каждого элемента массива

arr.forEach(function(item, index, array) {
  // ... делать что-то с item (элементом)
});

10. 
выбрать все инпуты: console.log(document.querySelectorAll('input'));

11. 
Сортировка массивов в JavaScript делается через метод array.sort():
- метод сортирует массив меняя в нем порядок элементов
- по умолчанию все элементы сортируются как строки (в алфавитном порядке)
- чтобы использовать наш собственный порядок сортировки, нам нужно предоставить функцию в качестве аргумента arr.sort()

Например, чтобы сортировка прошла по числам и в возрастающем порядке, функция-параметр должна быть такой:
arr.sort((a, b) => a - b);
в убывающем порядке:
arr.sort((a, b) => b - a);
Чтобы показать отсортированные элементы в обратном порядке, можно также использовать метод arr.reverse();

12.
Принудительно остановить выполнение цикла можно с помощью директивы break.

